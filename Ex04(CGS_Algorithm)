import numpy as np
from scipy import signal
import pylab as pl
import matplotlib.pyplot as plt
from math import pow

#def addition(*args):
    # result=0
x=pow(10,-7)
print("x=",x)
r=3
c=4
matrix=np.zeros((r,c))
print("matrix",matrix)
matrix = np.transpose(np.array([[1,1,1],
          [x,0,x],
          [0,x,0],
          [0,0,x]]))
print("mat_0",matrix)
p1=matrix[:,0]
p2=matrix[:,1]
p3=matrix[:,2]
print("p1",len(p1))

list=np.array([p1,p2,p3])
print("pmax",list)


# def cgs(list,r,c):
#  print("s=", list)
#  print("list1",list[1])
#  print("lenof0",len(list[0]))
#
#
#  print("len",len(list))
#  q=np.zeros((r,c))
#
#  e=np.zeros((r,c))
#  print('e',len(list))
#  g=0
#  m=np.zeros(c)
#  #print("lenofm",len(m))
#
#  i=0
#  k=0
#  j=0
#
#  e[0] = list[0]
#  print("e[0]=",e[0])
#  g = np.matmul(np.transpose(e[0]),e[0])
#  print("g=",g)
#  q[0] = e[0]/(np.sqrt(g))
#
#  print("q[0]",q[0])
#  for j in range(1, len(list)):
#   for i,j in zip(range(1,3),range(1,3)):
#        m=0
#        for k in range(0,i):
#            print("j=",j)
#
#            m=m+np.matmul(np.transpose(q[k]),list[j])*q[k]
#        print("m=",m)
#        e[i]=list[j]-m
#
#        if np.any(e[i]):
#         q[i] = e[i] / np.sqrt(np.matmul(np.transpose(e[i]), e[i]))
#        else:
#         i = i - 1# i intialize again
#         continue
#
#
#  return e
#
#
# h = np.array(r)
# #def main():
# h=cgs(matrix,r,c) #   main()
#
# print("cgs",h)
# #   main()

def cgs2(list,r,c):
 print("s=", list)
 print("list1",list[1])
 print("lenof0",len(list[0]))


 print("len",len(list))
 q=np.zeros((r,c))

 e=np.zeros((r,c))
 print('e',len(list))
 g=0
 m=np.zeros(c)
 #print("lenofm",len(m))

 i=0
 k=0
 j=0

 e[0] = list[0]
 print("e[0]=",e[0])
 g = np.matmul(np.transpose(e[0]),e[0])
 print("g=",g)
 q[0] = e[0]/(np.sqrt(g))

 print("q[0]",q[0])
 for j in range(1, len(list)):
  for i,j in zip(range(1,3),range(1,3)):
       m=0
       for k in range(0,i):
           print("j=",j)

           m=m+np.matmul(np.transpose(q[k]),list[j])*q[k]
       print("m=",m)
       e[i]=list[j]-m

       if np.any(e[i]):
        q[i] = e[i] / np.sqrt(np.matmul(np.transpose(e[i]), e[i]))
       else:
        i = i - 1# i intialize again
        continue

